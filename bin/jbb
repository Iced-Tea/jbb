#!/usr/bin/env node
"use strict";

// Override default console functions
var colors = require("colors"), hideWarn = false;
console.warn = function() { if (hideWarn) return; console.log.apply(console, ["WARN:".yellow].concat(Array.prototype.slice.call(arguments)) ); };
console.error = function() { console.log.apply(console, ["ERROR:".red].concat(Array.prototype.slice.call(arguments)) ); };
console.info = function() { console.log.apply(console, ["INFO:".green].concat(Array.prototype.slice.call(arguments)) ); };

// Get dependencies
var BinaryEncoder = require("jbb").BinaryEncoder;

/**
 * Apply log flags according to the log tags (string argument)
 */
var applyLogFlags = function( encoder, logTags ) {

	// Apply logging flags
	var logFlags = 0;
	for (var i=0; i<logTags.length; i++) {
		var t = logTags[i];
		switch (t) {
			case 'p': logFlags |= BinaryEncoder.LogFlags.PRM; break;
			case 'a': logFlags |= BinaryEncoder.LogFlags.ARR; break;
			case 'c': logFlags |= BinaryEncoder.LogFlags.CHU; break;
			case 's': logFlags |= BinaryEncoder.LogFlags.STR; break;
			case 'r': logFlags |= BinaryEncoder.LogFlags.IREF; break;
			case 'R': logFlags |= BinaryEncoder.LogFlags.XREF; break;
			case 'o': logFlags |= BinaryEncoder.LogFlags.OBJ; break;
			case 'e': logFlags |= BinaryEncoder.LogFlags.EMB; break;
			case 'O': logFlags |= BinaryEncoder.LogFlags.PLO; break;
			case 'b': logFlags |= BinaryEncoder.LogFlags.BULK; break;
			case 'd': logFlags |= BinaryEncoder.LogFlags.PDBG; break;
			case 'w': logFlags |= BinaryEncoder.LogFlags.WRT; break;
			case '-': logFlags |= 0xffff; break;
		}
	}
	encoder.setLogFlags( logFlags );

}

///////////////////////////////////////////////////////////////////////


